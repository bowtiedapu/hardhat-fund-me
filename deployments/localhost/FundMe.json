{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasOptimizedWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x08388ae563a5dafff3360cceeb70d640e5370cd65af90caf5960d56c4c351f0d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "965602",
    "logsBloom": "0x
    "blockHash": "0x030424afcbc381279b490ab7282c61c786aefe4596c1ea8112591786136f9e30",
    "transactionHash": "0x08388ae563a5dafff3360cceeb70d640e5370cd65af90caf5960d56c4c351f0d",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "965602",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "5b05d5912506602b39f3e2ae4ccc2cee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasOptimizedWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BowTiedApu\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"funds the contract\"},\"withdraw()\":{\"notice\":\"withdraws from the contract, but only the owner can withdraw\"}},\"notice\":\"This contract is to demo a sample funding contract purely for learning purposes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Using error is more gas efficient compared to using `require` with a string\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author BowTiedApu\\n * @notice This contract is to demo a sample funding contract purely for learning purposes\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    /**\\n     * Some more information on keywords:\\n     * constant - can never be changed after compilation.\\n     * immutable - can be set within the constructor\\n     *\\n     * Both constant and immutable does not reserve a storage spot for variables market constant or immutable\\n     */\\n    address private immutable i_owner;\\n\\n    // This won't change after compile time, so we can mark this as `constant`, which will also optimize our gas usage\\n    uint256 private constant MINIMUM_USD = 50 * 10**18;\\n\\n    /**\\n     * Whenever we have these global variables i.e. uint256 favoriteNumber;\\n     * These are stuck in storage. Each slot is 32 bytes long, and represents the bytes version of the object\\n     * Storage is a giant array/list of all variables we create, and associated with this contract. Every single variable/value is slotted into\\n     * a 32 bytes-long slot. Every time another global variable is created, it takes up another storage slot.\\n     *\\n     * A dynamic value like mappings or dynamic arrays are stored using a hashing function.\\n     * For arrays, a sequential storage spot is taken up for the length of the array. For mappings, a sequential sotrage\\n     * spot is taken up, but left blank.\\n     * To take a concrete example of this, if we create an array, only the array's length is stored in storage. If we place a value within this array,\\n     * the hashing function (keccak256) is called to get the location of where the aforementioned value should be held in storage. If think about this\\n     * from a fundamental CS perspective, this makes sense as we do NOT want to store each value in adjacent entries to the array's length in storage.\\n     * For mappings, a sequential storage spot is taken up, but is blank. For more information, check out:\\n     * https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays\\n     *\\n     *\\n     * Constant variables are part of the contract's bytecode, and is not stored in strage; it's just a pointer to a value\\n     * Memory variables are deleted after the function has finished running.\\n     *\\n     * Anytime we read or write to or form storage, we spend a ton of gas. We can see this when using opcodes.\\n     * Gas is calculated using opcodes, and to learn more, check out https://github.com/crytic/evm-opcodes\\n     * Prepend \\\"s_\\\" to show that a variable is storage variable\\n     */\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    /**\\n     * A modifier is a keyword to modify a function definition.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        /**\\n         *  The underscore indicates we should continue with the rest of our code.\\n         * Order matters here, this means any require statements or \\\"if\\\" statements should occur before.\\n         * We do not want to call the rest of our code, only for the if and require checks to start and revert all the work our code already did.\\n         */\\n        _;\\n    }\\n\\n    /**\\n     * `fallback` and `receive` are two special functions\\n     * A given contract can have at most one `receive` function without the `function` keyword.\\n     * It can't have args, can't return anything, and msust be external and payable. However, it can be virtual and have modifiers\\n     *\\n     * The point of receive\\n     */\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /**\\n     * @notice funds the contract\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    /**\\n     * @notice withdraws from the contract, but only the owner can withdraw\\n     */\\n    function withdraw() public onlyOwner {\\n        /**\\n         * This reads and writes to storage frequently. Every single time, we keep doing a\\n         * comparison with what is in storage, which is expensive.\\n         */\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        /**\\n         * For more info, look at https://solidity-by-example.org/sending-ether\\n         * There are some issues with using transfer.\\n         * transfer throws an error. Meaning if we try to transfer and we fail, it'll throw an error AND revert.\\n         * send returns a bool. Meaning if we try to send and we fail, we'll only get a boolean. We will NOT revert.\\n         * call returns 2 variables; a boolean and a bytes object. Call is a lower level command, and we can use it to call any function.\\n         *\\n         * Here are a few examples\\n         * transfer --> payable(msg.sender).transfer(address(this).balance)\\n         * send     --> payable(msg.sender).send(address(this).balance)\\n         * call     --> payable(msg.sender).call{value: adddress(this).balance}(\\\"\\\")\\n         *\\n         * If transfer fails, it will automatically revert.\\n         * If send fails, we wouldn't revert the txn, so we want to add a require statement so that we revert.\\n         * If call returns a value, its stored in the bytes object, which is an array. If it fails, we need to use require as well to revert successfully\\n         */\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function gasOptimizedWithdraw() public payable onlyOwner {\\n        // Memory is much cheaper, but keep in mind that mappings can't be in memory\\n        address[] memory funders = s_funders;\\n\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x283b21f591b7d4ccb55b888e60ee148af31c0fb4d10f17e5d4dbe9c975c65d04\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    /**\\n     * getPrice returns the current price from a given price feed.\\n     * This is set to view since it does *not* modify any state.\\n     *\\n     * If this was public, we would need to deploy this again\\n     */\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n\\n        /**\\n         * Recall that in Solidity, we do *NOT* deal with decimals.\\n         * We need to understand how to convert correctly.\\n         * We could express 10000000000 as 1e10, which is 1**10.\\n         * For more info on how to convert, check out eth-converter.com\\n         * Keep in mind that if we just return \\\"answer * 1e10\\\", we will return\\n         * int256, where the expectation is to return uint256. To change types, we\\n         * must type cast as follows:\\n         */\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        // If ETH is 1500 USD, then this ethPrice would tack on another 18 zeros, so\\n        // 1500_000000000000000000 which is the ETH/USD price\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // 1000000000000000000 == 1e18\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x74d7ae1273b60a0557cc69de7bb911cedd29c3a0f8aa779b8219ef0ca772c36b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011903803806200119083398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051611017620001796000396000818161030c0152818161057a01526107bc01526110176000f3fe6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e8146100eb5780639e87a5cd14610116578063b60d428814610141578063d7b4750c1461014b57610083565b80630343fb251461008d578063247ea1f1146100ca5780633ccfd60b146100d457610083565b3661008357610081610188565b005b61008b610188565b005b34801561009957600080fd5b506100b460048036038101906100af9190610a29565b6102c2565b6040516100c19190610a6f565b60405180910390f35b6100d261030a565b005b3480156100e057600080fd5b506100e9610578565b005b3480156100f757600080fd5b506101006107b8565b60405161010d9190610a99565b60405180910390f35b34801561012257600080fd5b5061012b6107e0565b6040516101389190610b13565b60405180910390f35b610149610188565b005b34801561015757600080fd5b50610172600480360381019061016d9190610b5a565b61080a565b60405161017f9190610a99565b60405180910390f35b6802b5e3af16b18800006101c7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461085290919063ffffffff16565b1015610208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ff90610be4565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102569190610c33565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561041357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103c9575b5050505050905060005b815181101561049d57600082828151811061043b5761043a610c67565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049590610c96565b91505061041d565b50600067ffffffffffffffff8111156104b9576104b8610cde565b5b6040519080825280602002602001820160405280156104e75781602001602082028036833780820191505090505b50600190805190602001906104fd92919061091f565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052490610d3e565b60006040518083038185875af1925050503d8060008114610561576040519150601f19603f3d011682016040523d82523d6000602084013e610566565b606091505b505090508061057457600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105fd576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156106a85760006001828154811061062357610622610c67565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106a090610c96565b915050610600565b50600067ffffffffffffffff8111156106c4576106c3610cde565b5b6040519080825280602002602001820160405280156106f25781602001602082028036833780820191505090505b506001908051906020019061070892919061091f565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161072f90610d3e565b60006040518083038185875af1925050503d806000811461076c576040519150601f19603f3d011682016040523d82523d6000602084013e610771565b606091505b50509050806107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ac90610d9f565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600182815481106108205761081f610c67565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061085e8361088e565b90506000670de0b6b3a764000085836108779190610dbf565b6108819190610e30565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109009190610eee565b5050509150506402540be400816109179190610f69565b915050919050565b828054828255906000526020600020908101928215610998579160200282015b828111156109975782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061093f565b5b5090506109a591906109a9565b5090565b5b808211156109c25760008160009055506001016109aa565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109f6826109cb565b9050919050565b610a06816109eb565b8114610a1157600080fd5b50565b600081359050610a23816109fd565b92915050565b600060208284031215610a3f57610a3e6109c6565b5b6000610a4d84828501610a14565b91505092915050565b6000819050919050565b610a6981610a56565b82525050565b6000602082019050610a846000830184610a60565b92915050565b610a93816109eb565b82525050565b6000602082019050610aae6000830184610a8a565b92915050565b6000819050919050565b6000610ad9610ad4610acf846109cb565b610ab4565b6109cb565b9050919050565b6000610aeb82610abe565b9050919050565b6000610afd82610ae0565b9050919050565b610b0d81610af2565b82525050565b6000602082019050610b286000830184610b04565b92915050565b610b3781610a56565b8114610b4257600080fd5b50565b600081359050610b5481610b2e565b92915050565b600060208284031215610b7057610b6f6109c6565b5b6000610b7e84828501610b45565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610bce601b83610b87565b9150610bd982610b98565b602082019050919050565b60006020820190508181036000830152610bfd81610bc1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3e82610a56565b9150610c4983610a56565b9250828201905080821115610c6157610c60610c04565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ca182610a56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cd357610cd2610c04565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d28600083610d0d565b9150610d3382610d18565b600082019050919050565b6000610d4982610d1b565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d89600b83610b87565b9150610d9482610d53565b602082019050919050565b60006020820190508181036000830152610db881610d7c565b9050919050565b6000610dca82610a56565b9150610dd583610a56565b9250828202610de381610a56565b91508282048414831517610dfa57610df9610c04565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e3b82610a56565b9150610e4683610a56565b925082610e5657610e55610e01565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e8081610e61565b8114610e8b57600080fd5b50565b600081519050610e9d81610e77565b92915050565b6000819050919050565b610eb681610ea3565b8114610ec157600080fd5b50565b600081519050610ed381610ead565b92915050565b600081519050610ee881610b2e565b92915050565b600080600080600060a08688031215610f0a57610f096109c6565b5b6000610f1888828901610e8e565b9550506020610f2988828901610ec4565b9450506040610f3a88828901610ed9565b9350506060610f4b88828901610ed9565b9250506080610f5c88828901610e8e565b9150509295509295909350565b6000610f7482610ea3565b9150610f7f83610ea3565b9250828202610f8d81610ea3565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fc557610fc4610c04565b5b8282058414831517610fda57610fd9610c04565b5b509291505056fea26469706673582212208fdb01cdf9809e1c5c0f60f39398f48ac3b179785a0506a8203e8bcd57a4137e64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "BowTiedApu",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "funds the contract"
      },
      "withdraw()": {
        "notice": "withdraws from the contract, but only the owner can withdraw"
      }
    },
    "notice": "This contract is to demo a sample funding contract purely for learning purposes",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 76,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}