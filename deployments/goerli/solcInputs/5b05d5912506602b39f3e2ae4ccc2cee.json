{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// Using error is more gas efficient compared to using `require` with a string\nerror FundMe__NotOwner();\n\n/**\n * @title A contract for crowd funding\n * @author BowTiedApu\n * @notice This contract is to demo a sample funding contract purely for learning purposes\n * @dev This implements price feeds as our library\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] private s_funders;\n\n    /**\n     * Some more information on keywords:\n     * constant - can never be changed after compilation.\n     * immutable - can be set within the constructor\n     *\n     * Both constant and immutable does not reserve a storage spot for variables market constant or immutable\n     */\n    address private immutable i_owner;\n\n    // This won't change after compile time, so we can mark this as `constant`, which will also optimize our gas usage\n    uint256 private constant MINIMUM_USD = 50 * 10**18;\n\n    /**\n     * Whenever we have these global variables i.e. uint256 favoriteNumber;\n     * These are stuck in storage. Each slot is 32 bytes long, and represents the bytes version of the object\n     * Storage is a giant array/list of all variables we create, and associated with this contract. Every single variable/value is slotted into\n     * a 32 bytes-long slot. Every time another global variable is created, it takes up another storage slot.\n     *\n     * A dynamic value like mappings or dynamic arrays are stored using a hashing function.\n     * For arrays, a sequential storage spot is taken up for the length of the array. For mappings, a sequential sotrage\n     * spot is taken up, but left blank.\n     * To take a concrete example of this, if we create an array, only the array's length is stored in storage. If we place a value within this array,\n     * the hashing function (keccak256) is called to get the location of where the aforementioned value should be held in storage. If think about this\n     * from a fundamental CS perspective, this makes sense as we do NOT want to store each value in adjacent entries to the array's length in storage.\n     * For mappings, a sequential storage spot is taken up, but is blank. For more information, check out:\n     * https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays\n     *\n     *\n     * Constant variables are part of the contract's bytecode, and is not stored in strage; it's just a pointer to a value\n     * Memory variables are deleted after the function has finished running.\n     *\n     * Anytime we read or write to or form storage, we spend a ton of gas. We can see this when using opcodes.\n     * Gas is calculated using opcodes, and to learn more, check out https://github.com/crytic/evm-opcodes\n     * Prepend \"s_\" to show that a variable is storage variable\n     */\n\n    AggregatorV3Interface private s_priceFeed;\n\n    /**\n     * A modifier is a keyword to modify a function definition.\n     */\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        /**\n         *  The underscore indicates we should continue with the rest of our code.\n         * Order matters here, this means any require statements or \"if\" statements should occur before.\n         * We do not want to call the rest of our code, only for the if and require checks to start and revert all the work our code already did.\n         */\n        _;\n    }\n\n    /**\n     * `fallback` and `receive` are two special functions\n     * A given contract can have at most one `receive` function without the `function` keyword.\n     * It can't have args, can't return anything, and msust be external and payable. However, it can be virtual and have modifiers\n     *\n     * The point of receive\n     */\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    /**\n     * @notice funds the contract\n     */\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"You need to spend more ETH!\"\n        );\n        s_addressToAmountFunded[msg.sender] += msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    /**\n     * @notice withdraws from the contract, but only the owner can withdraw\n     */\n    function withdraw() public onlyOwner {\n        /**\n         * This reads and writes to storage frequently. Every single time, we keep doing a\n         * comparison with what is in storage, which is expensive.\n         */\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        /**\n         * For more info, look at https://solidity-by-example.org/sending-ether\n         * There are some issues with using transfer.\n         * transfer throws an error. Meaning if we try to transfer and we fail, it'll throw an error AND revert.\n         * send returns a bool. Meaning if we try to send and we fail, we'll only get a boolean. We will NOT revert.\n         * call returns 2 variables; a boolean and a bytes object. Call is a lower level command, and we can use it to call any function.\n         *\n         * Here are a few examples\n         * transfer --> payable(msg.sender).transfer(address(this).balance)\n         * send     --> payable(msg.sender).send(address(this).balance)\n         * call     --> payable(msg.sender).call{value: adddress(this).balance}(\"\")\n         *\n         * If transfer fails, it will automatically revert.\n         * If send fails, we wouldn't revert the txn, so we want to add a require statement so that we revert.\n         * If call returns a value, its stored in the bytes object, which is an array. If it fails, we need to use require as well to revert successfully\n         */\n        s_funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function gasOptimizedWithdraw() public payable onlyOwner {\n        // Memory is much cheaper, but keep in mind that mappings can't be in memory\n        address[] memory funders = s_funders;\n\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n        (bool success, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(success);\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address funder)\n        public\n        view\n        returns (uint256)\n    {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// Why is this a library and not abstract?\n// Why not an interface?\nlibrary PriceConverter {\n    /**\n     * getPrice returns the current price from a given price feed.\n     * This is set to view since it does *not* modify any state.\n     *\n     * If this was public, we would need to deploy this again\n     */\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        // Goerli ETH / USD Address\n        // https://docs.chain.link/docs/ethereum-addresses/\n\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n\n        /**\n         * Recall that in Solidity, we do *NOT* deal with decimals.\n         * We need to understand how to convert correctly.\n         * We could express 10000000000 as 1e10, which is 1**10.\n         * For more info on how to convert, check out eth-converter.com\n         * Keep in mind that if we just return \"answer * 1e10\", we will return\n         * int256, where the expectation is to return uint256. To change types, we\n         * must type cast as follows:\n         */\n        return uint256(answer * 10000000000);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        // If ETH is 1500 USD, then this ethPrice would tack on another 18 zeros, so\n        // 1500_000000000000000000 which is the ETH/USD price\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        // 1000000000000000000 == 1e18\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}